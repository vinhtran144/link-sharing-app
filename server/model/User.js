const mongoose = require('mongoose');
const {Schema} = mongoose;
const cryptoRandomString = require ('crypto-random-string');

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true,
        trim: true
    },
    // Hash and salt will be generated by passport once it's implemented
    // status: on going
    hash: {
        type: String,
        required: true
    },
    salt: {
        type: String,
        required: true
    },

    // User's saved links
    links: [
        {
            type: Schema.Types.ObjectId,
            ref: 'Link'
        }
    ],

    // User's personallized URL extension for their page, will be generated when created
    // future extension can have each users pick their own URL extension, for example
    devlinkURL: {
        type: String,
        required: true,
        unique: true
    }
})

// generate randomdevlinkURL whenever a user is added
userSchema.pre('save', async function(next) {
    // checking just in case the function generate URL link that already existed
    let newURLcheck=true;
    while (newURLcheck) {
        const newURL = cryptoRandomString({length:10, type: 'url-safe'});
        const existedUser = await User.findOne({devlinkURL: newURL});
        if (!existedUser) {
            newURLcheck = false;
            this.devlinkURL = newURL;
        }
    }
    next();
})

const User = mongoose.model('User', userSchema);

module.exports = User;