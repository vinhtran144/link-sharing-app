const mongoose = require('mongoose');
const { genCustomURL } = require('../utils/cryptoUtils');
const { Schema } = mongoose;

const userSchema = new mongoose.Schema({
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true
    },
    // Hash and salt will be generated by passport once it's implemented
    // status: on going
    hash: {
        type: String,
        required: true
    },
    salt: {
        type: String,
        required: true
    },

    // User's saved links
    links: [
        {
            type: Schema.Types.ObjectId,
            ref: 'Link'
        }
    ],
    firstName: {
        type: String
    },
    lastName: {
        type: String
    }
    ,

    // User's personallized URL extension for their page, will be generated when created
    // future extension can have each users pick their own URL extension, for example
    devlinkURL: {
        type: String,
        unique: true
    },

    profilePic: {
        type: Buffer
    }
})

// generate randomdevlinkURL whenever a user is added
userSchema.pre('save', async function(next) {

    // Generate URL token whenever a user is created
    if (this.isNew) {
        // checking just in case the function generate URL link that already existed
        let newURLcheck=true;
        while (newURLcheck) {
            const newURL = genCustomURL(6);
            const existedUser = await User.findOne({devlinkURL: newURL});
            console.log(`New custom URL: ${newURL}`);
            if (!existedUser) {
                newURLcheck = false;
                this.devlinkURL = newURL;
            }
        }
    }
    next();
})

const User = mongoose.model('User', userSchema);

module.exports = User;